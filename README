README for LTC with Maven 3
===========================

Requirements
------------

- Java 6 or higher
- git 1.7.2.2 or higher
- Maven 3
- JGraphT 0.8.2 in local Maven repository:

For the time being, you will have to install the supplied JGraphT library into your local Maven repository by hand:

$> mvn install:install-file -Dfile=lib/jgrapht-jdk1.6.jar \
   -DgroupId=org.jgrapht -DartifactId=jgrapht-jdk1.6 -Dversion=0.8.3 -Dpackaging=jar

which should produce a little bit of output containing "BUILD SUCCESS".  This step has to be done only once.


Developing
----------

Common Maven goals are:

$> mvn clean
$> mvn compile
$> mvn test

To create the distributable:

$> mvn clean package

To create the site (include "verify" for link to download the JAR etc.):

$> mvn verify site

If manual has new, externalized TikZ pictures, manually convert .pdf into .png (using Preview) under
  all/src/site/tex/manual/figures/manual-figure*.pdf

Before deploying, need to log into CSL Unix cluster to manually delete the directory ~linda/public_html/LTC/all!

$> mvn clean package site site:deploy

To skip tests (when running repeatedly):

$> mvn verify site -Dmaven.test.skip=true

To view the contents of a JAR file without expanding it, use Firefox:
  jar:file:///Users/linda/tmp/LTCjava/LTC-<version>-SNAPSHOT.jar!/
and then browse


Running
-------

(after "mvn package")

a) Server

  After packaging or wherever you downloaded the JAR:

  $> java -jar all/target/LTC-<version>.jar

  To debug remotely on <PORT> (i.e., when using with Emacs ltc-mode):

  $> java -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=<PORT> -jar all/target/LTC-<version>.jar

b) Java Editor and Viewer

  $> java -cp all/target/LTC-<version>.jar com.sri.ltc.editor.LTCEditor -h
  This editor mimics all functionality of an editor plug-in except it doesn't use XML-RPC to communicate with the
  LTC base system.  Instead, it simply calls the Java methods in the JVM.

  $> java -cp all/target/LTC-<version>.jar com.sri.ltc.editor.LTCFileViewer -h
  The file viewer utility by-passes all git specific history and instead allows for a list of files to be
  compared and changes accumulated.  The text is not editable.

c) Utilities

 To perform lexical analysis of a .tex file, use either one:

  $> java -cp all/target/LTC-<version>.jar com.sri.ltc.latexdiff.Lexer <FILE>
  or
  $> cat <FILE> | java -cp all/target/LTC-<version>.jar com.sri.ltc.latexdiff.Lexer

 To compare 2 versions of .tex files, use this utility.  Note that you can trigger XML output using "-x":

  $> java -cp all/target/LTC-<version>.jar com.sri.ltc.latexdiff.LatexDiff -h

 To test the XML-RPC server, use this tool.  You should have the LTC server running:

  $> java -cp all/target/LTC-<version>.jar com.sri.ltc.server.HelloLTC -h


Testing
-------

$> mvn test


Git Repositories etc.
---------------------

a) bundling git repositories for download as examples.  See:
  http://stackoverflow.com/questions/2545765/how-can-i-email-someone-a-git-repository
  http://progit.org/2010/03/10/bundles.html

  $> cd independence
  $> git bundle create ../independence.bundle --all
  $> cd $Tutorial
  $> git clone ../LTCmanual/independence.bundle independence

b) retrieving file versions (using first 6 digits of SHA1):
  $> git show <SHA1>:<TEX-FILE> [ > <TEX-FILE>.<SHA1> ]

c) obtaining git tree by hand (for specified file):
  in root of git repository:
  $> git log --topo-order --graph --date=iso8601 \
             --format=format:"commit %H%nAuthor: %an <%ae>%nDate: %ad%nParents: %P%n%s%n" \
             <RELATIVE-PATH-TO-TEX-FILE>


Building manual by hand
-----------------------

* To build:

$> cd all/src/site/tex/manual
$> pdflatex manual -shell-escape
or use TeXShop

* To convert .pdf to .png:

$> convert -density 300 manual-figure0.pdf manual-figure0.png
or
$> for i in figures/manual-figure*.pdf; do convert -density 300 $i `echo $i | sed -e 's/\.pdf/\.png/g'`; done
or use Preview.app?

* To build HTML version by hand:

$> htlatex manual "manual,0,png" "" "" "-interaction=nonstopmode --src-specials"

* Converting other .tiff files in bulk (use wildcard appropriately) when making new screen shots (e.g., with Grab)

$> for file in *.tiff; do convert $file `basename $file .tiff`.png; done


Incrementing version number
---------------------------

Using the Maven versions plugin:
http://weblogs.java.net/blog/johnsmart/archive/2010/08/18/managing-version-numbers-maven-maven-version-plugin

 $> mvn versions:display-dependency-updates      => to show, which dependencies have updates
 $> mvn versions:use-latest-versions             => to update all dependencies
 $> mvn versions:display-plugin-updates          => to show, which plugins have updates (still edit by hand?)

 $> mvn clean package site                       => to test
 $> mvn versions:commit                          => to remove backup info
or
 $> mvn versions:revert                          => to use backup info and roll back

 $> mvn versions:set -DnewVersion=1.0.2-SNAPSHOT => now updating LTC version information
 $> mvn versions:commit                          => to remove backup info
or
 $> mvn versions:revert                          => to use backup info and roll back


Building Tech Report 2012
-------------------------

$> mvn verify site   => generate examples for appendices
$> cd all/src/tex/techreport2012
$> pdflatex report2012
$> pdflatex report2012
$> bibtex report2012
$> pdflatex report2012
$> pdflatex report2012


Programming Emacs mode
----------------------

Cursor position: C-x =
(note that Emacs starts counting from position 1 but Java document starts from position 0!)

Interactive Emacs Lisp: M-x ielm
- to obtain buffer object for testing:
    ELISP> (setq buf (get-buffer "independence.tex"))
    #<buffer independence.tex>
