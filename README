README for LTC with Maven 3
===========================

Requirements
------------

- Java 6 or higher
- git 1.7.2.2 or higher
- Maven 3
- LaTeX (for building manual)

(We no longer need JGraphT 0.8.3 in the local Maven repository; to remove before building for the first time simply
 remove the directory from your local repository:
   $> rm -rf ~/.m2/repository/org/jgrapht
 and during the next compile cycle, you should see Maven downloading the library from conjars.org:
   Downloading: http://conjars.org/repo/jgrapht/jgrapht/0.8.3/jgrapht-0.8.3.pom
   ...
)


Developing
----------

Common Maven goals are:

$> mvn clean
$> mvn compile
$> mvn test

To create the distributable:

$> mvn clean package

To create the site (include "verify" for link to download the JAR etc.):

$> mvn verify site

If manual has new, externalized TikZ pictures, manually convert .pdf into .png (using Preview) under
  all/src/site/tex/manual/figures/manual-figure*.pdf

Before deploying, need to log into CSL Unix cluster to manually delete the directory ~linda/public_html/LTC/all!

$> mvn clean package site site:deploy

To skip tests (when running repeatedly):

$> mvn verify site -Dmaven.test.skip=true

To view the contents of a JAR file without expanding it, use Firefox:
  jar:file:///Users/linda/tmp/LTCjava/LTC-<version>-SNAPSHOT.jar!/
and then browse


Branching Model
---------------

We are now following the ideas behind
  http://nvie.com/posts/a-successful-git-branching-model/
and also start using "git-flow" as explained in
  http://jeffkreeftmeijer.com/2010/why-arent-you-using-git-flow/

We are using the default branch prefixes.  In short, if working on a bigger feature, create a new feature branch from
your current 'develop' branch:
  $> git flow feature start <feature name>
When finishing the bigger feature:
  $> git flow feature finish <feature name>

When you’re feature complete, simply start a release branch — again, based on 'develop' — to bump the version number
and fix the last bugs before releasing:
  $> git flow release start v1.0
    [do minor fixes if needed]
  $> mvn versions:set -DnewVersion=1.0
  $> mvn versions:commit
  $> git commit -am "preparing release of v1.0"
    [delete ~/public_html/LTC/all on thor before:]
  $> mvn clean package verify site site:deploy
  $> git flow release finish v1.0
    [supply tag message]
  $> mvn versions:set -DnewVersion=1.1-SNAPSHOT
  $> mvn versions:commit
  $> git commit -am "bumping next release number to v1.1-SNAPSHOT"


Running
-------

(after "mvn package")

a) Server

  After packaging or wherever you downloaded the JAR:

  $> java -jar all/target/LTC-<version>.jar

  To debug remotely on <PORT> (i.e., when using with Emacs ltc-mode):

  $> java -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=<PORT> -jar all/target/LTC-<version>.jar

b) Java Editor and Viewer

  $> java -cp all/target/LTC-<version>.jar com.sri.ltc.editor.LTCEditor -h
  This editor mimics all functionality of an editor plug-in except it doesn't use XML-RPC to communicate with the
  LTC base system.  Instead, it simply calls the Java methods in the JVM.

  $> java -cp all/target/LTC-<version>.jar com.sri.ltc.editor.LTCFileViewer -h
  The file viewer utility by-passes all git specific history and instead allows for a list of files to be
  compared and changes accumulated.  The text is not editable.

c) Utilities

 To perform lexical analysis of a .tex file, use either one:

  $> java -cp all/target/LTC-<version>.jar com.sri.ltc.latexdiff.Lexer <FILE>
  or
  $> cat <FILE> | java -cp all/target/LTC-<version>.jar com.sri.ltc.latexdiff.Lexer

 To compare 2 versions of .tex files, use this utility.  Note that you can trigger XML output using "-x":

  $> java -cp all/target/LTC-<version>.jar com.sri.ltc.latexdiff.LatexDiff -h

 To test the XML-RPC server, use this tool.  You should have the LTC server running:

  $> java -cp all/target/LTC-<version>.jar com.sri.ltc.server.HelloLTC -h


Testing
-------

$> mvn test


Git Repositories etc.
---------------------

a) bundling git repositories for download as examples.  See:
  http://stackoverflow.com/questions/2545765/how-can-i-email-someone-a-git-repository
  http://progit.org/2010/03/10/bundles.html

  $> cd independence
  $> git bundle create ../independence.bundle --all
  $> cd $Tutorial
  $> git clone ../LTCmanual/independence.bundle independence

b) retrieving file versions (using first 6 digits of SHA1):
  $> git show <SHA1>:<TEX-FILE> [ > <TEX-FILE>.<SHA1> ]

c) obtaining git tree by hand (for specified file):
  in root of git repository:
  $> git log --topo-order --graph --date=iso8601 \
             --format=format:"commit %H%nAuthor: %an <%ae>%nDate: %ad%nParents: %P%n%s%n" \
             <RELATIVE-PATH-TO-TEX-FILE>


Building manual by hand
-----------------------

* To build:

$> cd all/src/site/tex/manual
$> pdflatex manual -shell-escape
or use TeXShop

* To build HTML version by hand:

$> cd all/src/site/tex/manual
$> htlatex manual "manual,0,png" "" "" "-interaction=nonstopmode --src-specials"

* Converting images using Makefile:

$> cd all/src/site/tex/manual/figures
$> make

* To convert manually:

$> cd all/src/site/tex/manual/figures
$> convert -density 300 manual-figure0.pdf manual-figure0.png
or
$> for i in figures/manual-figure*.pdf; do convert -density 300 $i `echo $i | sed -e 's/\.pdf/\.png/g'`; done
or use Preview.app?

$> cd all/src/site/tex/manual/figures
$> for file in *.tiff; do convert $file `basename $file .tiff`.png; done


Incrementing version number
---------------------------

Using the Maven versions plugin:
http://weblogs.java.net/blog/johnsmart/archive/2010/08/18/managing-version-numbers-maven-maven-version-plugin

 $> mvn versions:display-dependency-updates      => to show, which dependencies have updates
 $> mvn versions:use-latest-versions             => to update all dependencies
 $> mvn versions:display-plugin-updates          => to show, which plugins have updates (still edit by hand?)

 $> mvn clean package site                       => to test
 $> mvn versions:commit                          => to remove backup info
or
 $> mvn versions:revert                          => to use backup info and roll back

 $> mvn versions:set -DnewVersion=1.0.2-SNAPSHOT => now updating LTC version information
 $> mvn versions:commit                          => to remove backup info
or
 $> mvn versions:revert                          => to use backup info and roll back


Building Tech Report 2012
-------------------------

$> mvn verify site   => generate examples for appendices
$> cd all/src/tex/techreport2012
$> pdflatex report2012
$> pdflatex report2012
$> bibtex report2012
$> pdflatex report2012
$> pdflatex report2012


Programming Emacs mode
----------------------

Cursor position: C-x =
(note that Emacs starts counting from position 1 but Java document starts from position 0!)

Interactive Emacs Lisp: M-x ielm
- to obtain buffer object for testing:
    ELISP> (setq buf (get-buffer "independence.tex"))
    #<buffer independence.tex>


Creating SVN repository for tutorial
------------------------------------

1. Create local repository and dump

 a) Create svn repository (in your home)

  $> cd
  $> svnadmin create svnrepos

  Now edit svnrepos/conf/svnserve.conf and svnrepos/conf/passwd to contain & start server:

  $> grep -v "^#" svnrepos/conf/svnserve.conf

  [general]
  anon-access = none
  auth-access = write
  password-db = passwd

  [sasl]
  $> grep -v "^#" svnrepos/conf/passwd

  [users]
  franklin = ltc
  adams = ltc
  sherman = ltc
  jefferson = ltc
  $> svnserve -d -r /Users/linda/svnrepos

 b) Fill with first commit

  $> cd ~/tmp/Tutorial
  $> mkdir initial-svn
  $> cd initial-svn
  $> cp ../independence1.tex independence.tex
  $> svn import --username jefferson -m "first version" ~/tmp/Tutorial/initial-svn file:///Users/linda/svnrepos/tutorial-svn
  Adding         /Users/linda/tmp/Tutorial/initial-svn/independence.tex

  Committed revision 1.

 c) Checkout and create other versions

  $> cd ~/tmp/Tutorial
  $> svn co --username adams svn://localhost/tutorial-svn
  Authentication realm: <svn://localhost:3690> 8b541c79-ea44-4304-8055-ab4e1cd7933f
  Password for 'adams':
  A    tutorial-svn/independence.tex
  Checked out revision 1.
  $> cp ../independence2.tex independence.tex
  $> svn commit -m "second version" --username adams independence.tex
  Sending        independence.tex
  Transmitting file data .
  Committed revision 2.
  $> svn up
  At revision 2.

  ... and repeat for versions 3 through 6.

  $> svn up
  At revision 6.
  $> svn log -q
  ------------------------------------------------------------------------
  r6 | sherman | 2012-11-13 13:01:00 -0600 (Tue, 13 Nov 2012)
  ------------------------------------------------------------------------
  r5 | sherman | 2012-11-13 13:00:35 -0600 (Tue, 13 Nov 2012)
  ------------------------------------------------------------------------
  r4 | jefferson | 2012-11-13 12:59:45 -0600 (Tue, 13 Nov 2012)
  ------------------------------------------------------------------------
  r3 | franklin | 2012-11-13 12:59:03 -0600 (Tue, 13 Nov 2012)
  ------------------------------------------------------------------------
  r2 | adams | 2012-11-13 12:58:04 -0600 (Tue, 13 Nov 2012)
  ------------------------------------------------------------------------
  r1 | jefferson | 2012-11-13 12:51:35 -0600 (Tue, 13 Nov 2012)
  ------------------------------------------------------------------------

 d) Dump repository into file

  $> cd
  $> svnadmin dump svnrepos > tutorialsvn
  * Dumped revision 0.
  * Dumped revision 1.
  * Dumped revision 2.
  * Dumped revision 3.
  * Dumped revision 4.
  * Dumped revision 5.
  * Dumped revision 6.
  $> gzip -v tutorialsvn
  tutorialsvn:	 77.7% -- replaced with tutorialsvn.gz

2. Replace repository at sf.net

[Shell only works in "classic" mode, so setting up a publicly available SVN server]

3. Stop local svnserver

  $> ps axu | grep svn
  linda           2395   0.0  0.0  2433896    408   ??  Ss   12:53PM   0:00.01 svnserve -d -r /Users/linda/svnrepos
  $> kill -9 2395
